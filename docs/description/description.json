[
  {
    "parameters": [
      {
        "name": "getWithoutSet",
        "description": "getWithoutSet"
      },
      {
        "name": "setWithoutGet",
        "description": "setWithoutGet"
      },
      {
        "name": "enforceForClassMembers",
        "description": "enforceForClassMembers"
      }
    ],
    "patternId": "accessor-pairs",
    "title": "Accessor pairs",
    "description": "Enforce getter and setter pairs in objects and classes",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "array-bracket-newline",
    "title": "Array bracket newline",
    "description": "Enforce linebreaks after opening and before closing array brackets",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "unnamedParam"
      }
    ],
    "patternId": "array-bracket-spacing",
    "title": "Array bracket spacing",
    "description": "Enforce consistent spacing inside array brackets",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "allowImplicit",
        "description": "allowImplicit"
      },
      {
        "name": "checkForEach",
        "description": "checkForEach"
      }
    ],
    "patternId": "array-callback-return",
    "title": "Array callback return",
    "description": "Enforce `return` statements in callbacks of array methods",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "array-element-newline",
    "title": "Array element newline",
    "description": "Enforce line breaks after each array element",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "arrow-body-style",
    "title": "Arrow body style",
    "description": "Require braces around arrow function bodies",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "unnamedParam"
      },
      {
        "name": "requireForBlockBody",
        "description": "requireForBlockBody"
      }
    ],
    "patternId": "arrow-parens",
    "title": "Arrow parens",
    "description": "Require parentheses around arrow function arguments",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "before",
        "description": "before"
      },
      {
        "name": "after",
        "description": "after"
      }
    ],
    "patternId": "arrow-spacing",
    "title": "Arrow spacing",
    "description": "Enforce consistent spacing before and after the arrow in arrow functions",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "block-scoped-var",
    "title": "Block scoped var",
    "description": "Enforce the use of variables within the scope they are defined",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "unnamedParam"
      }
    ],
    "patternId": "block-spacing",
    "title": "Block spacing",
    "description": "Disallow or enforce spaces inside of blocks after opening block and before closing block",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "unnamedParam"
      },
      {
        "name": "allowSingleLine",
        "description": "allowSingleLine"
      }
    ],
    "patternId": "brace-style",
    "title": "Brace style",
    "description": "Enforce consistent brace style for blocks",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "callback-return",
    "title": "Callback return",
    "description": "Require `return` statements after callbacks",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "ignoreDestructuring",
        "description": "ignoreDestructuring"
      },
      {
        "name": "ignoreImports",
        "description": "ignoreImports"
      },
      {
        "name": "ignoreGlobals",
        "description": "ignoreGlobals"
      }
    ],
    "patternId": "camelcase",
    "title": "Camelcase",
    "description": "Enforce camelcase naming convention",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "capitalized-comments",
    "title": "Capitalized comments",
    "description": "Enforce or disallow capitalization of the first letter of a comment",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "enforceForClassFields",
        "description": "enforceForClassFields"
      }
    ],
    "patternId": "class-methods-use-this",
    "title": "Class methods use this",
    "description": "Enforce that class methods utilize `this`",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "unnamedParam"
      }
    ],
    "patternId": "comma-dangle",
    "title": "Comma dangle",
    "description": "Require or disallow trailing commas",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "before",
        "description": "before"
      },
      {
        "name": "after",
        "description": "after"
      }
    ],
    "patternId": "comma-spacing",
    "title": "Comma spacing",
    "description": "Enforce consistent spacing before and after commas",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "unnamedParam"
      }
    ],
    "patternId": "comma-style",
    "title": "Comma style",
    "description": "Enforce consistent comma style",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "unnamedParam"
      }
    ],
    "patternId": "complexity",
    "title": "Complexity",
    "description": "Enforce a maximum cyclomatic complexity allowed in a program",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "unnamedParam"
      },
      {
        "name": "enforceForClassMembers",
        "description": "enforceForClassMembers"
      }
    ],
    "patternId": "computed-property-spacing",
    "title": "Computed property spacing",
    "description": "Enforce consistent spacing inside computed property brackets",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "treatUndefinedAsUnspecified",
        "description": "treatUndefinedAsUnspecified"
      }
    ],
    "patternId": "consistent-return",
    "title": "Consistent return",
    "description": "Require `return` statements to either always or never specify values",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "unnamedParam"
      }
    ],
    "patternId": "consistent-this",
    "title": "Consistent this",
    "description": "Enforce consistent naming when capturing the current execution context",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "constructor-super",
    "title": "Constructor super",
    "description": "Require `super()` calls in constructors",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "unnamedParam"
      }
    ],
    "patternId": "curly",
    "title": "Curly",
    "description": "Enforce consistent brace style for all control statements",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "default-case",
    "title": "Default case",
    "description": "Require `default` cases in `switch` statements",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "default-case-last",
    "title": "Default case last",
    "description": "Enforce default clauses in switch statements to be last",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "default-param-last",
    "title": "Default param last",
    "description": "Enforce default parameters to be last",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "unnamedParam"
      }
    ],
    "patternId": "dot-location",
    "title": "Dot location",
    "description": "Enforce consistent newlines before and after dots",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "allowKeywords",
        "description": "allowKeywords"
      },
      {
        "name": "allowPattern",
        "description": "allowPattern"
      }
    ],
    "patternId": "dot-notation",
    "title": "Dot notation",
    "description": "Enforce dot notation whenever possible",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "eol-last",
    "title": "Eol last",
    "description": "Require or disallow newline at the end of files",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "unnamedParam"
      }
    ],
    "patternId": "eqeqeq",
    "title": "Eqeqeq",
    "description": "Require the use of `===` and `!==`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "for-direction",
    "title": "For direction",
    "description": "Enforce \"for\" loop update clause moving the counter in the right direction.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "func-call-spacing",
    "title": "Func call spacing",
    "description": "Require or disallow spacing between function identifiers and their invocations",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "func-name-matching",
    "title": "Func name matching",
    "description": "Require function names to match the name of the variable or property to which they are assigned",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "func-names",
    "title": "Func names",
    "description": "Require or disallow named `function` expressions",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "unnamedParam"
      },
      {
        "name": "allowArrowFunctions",
        "description": "allowArrowFunctions"
      }
    ],
    "patternId": "func-style",
    "title": "Func style",
    "description": "Enforce the consistent use of either `function` declarations or expressions",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "function-call-argument-newline",
    "title": "Function call argument newline",
    "description": "Enforce line breaks between arguments of a function call",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "function-paren-newline",
    "title": "Function paren newline",
    "description": "Enforce consistent line breaks inside function parentheses",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "generator-star-spacing",
    "title": "Generator star spacing",
    "description": "Enforce consistent spacing around `*` operators in generator functions",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "allowImplicit",
        "description": "allowImplicit"
      }
    ],
    "patternId": "getter-return",
    "title": "Getter return",
    "description": "Enforce `return` statements in getters",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "global-require",
    "title": "Global require",
    "description": "Require `require()` calls to be placed at top-level module scope",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "grouped-accessor-pairs",
    "title": "Grouped accessor pairs",
    "description": "Require grouped accessor pairs in object literals and classes",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "guard-for-in",
    "title": "Guard for in",
    "description": "Require `for-in` loops to include an `if` statement",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "handle-callback-err",
    "title": "Handle callback err",
    "description": "Require error handling in callbacks",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "id-blacklist",
    "title": "Id blacklist",
    "description": "Disallow specified identifiers",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "id-denylist",
    "title": "Id denylist",
    "description": "Disallow specified identifiers",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "min",
        "description": "min"
      }
    ],
    "patternId": "id-length",
    "title": "Id length",
    "description": "Enforce minimum and maximum identifier lengths",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "unnamedParam"
      },
      {
        "name": "properties",
        "description": "properties"
      },
      {
        "name": "classFields",
        "description": "classFields"
      },
      {
        "name": "onlyDeclarations",
        "description": "onlyDeclarations"
      },
      {
        "name": "ignoreDestructuring",
        "description": "ignoreDestructuring"
      }
    ],
    "patternId": "id-match",
    "title": "Id match",
    "description": "Require identifiers to match a specified regular expression",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "implicit-arrow-linebreak",
    "title": "Implicit arrow linebreak",
    "description": "Enforce the location of arrow function bodies",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "unnamedParam"
      },
      {
        "name": "SwitchCase",
        "description": "SwitchCase"
      },
      {
        "name": "flatTernaryExpressions",
        "description": "flatTernaryExpressions"
      },
      {
        "name": "offsetTernaryExpressions",
        "description": "offsetTernaryExpressions"
      },
      {
        "name": "ignoreComments",
        "description": "ignoreComments"
      },
      {
        "name": "VariableDeclarator",
        "description": "VariableDeclarator"
      },
      {
        "name": "outerIIFEBody",
        "description": "outerIIFEBody"
      },
      {
        "name": "MemberExpression",
        "description": "MemberExpression"
      },
      {
        "name": "FunctionDeclaration",
        "description": "FunctionDeclaration"
      },
      {
        "name": "FunctionExpression",
        "description": "FunctionExpression"
      },
      {
        "name": "CallExpression",
        "description": "CallExpression"
      },
      {
        "name": "ArrayExpression",
        "description": "ArrayExpression"
      },
      {
        "name": "ObjectExpression",
        "description": "ObjectExpression"
      },
      {
        "name": "ImportDeclaration",
        "description": "ImportDeclaration"
      },
      {
        "name": "ignoredNodes",
        "description": "ignoredNodes"
      }
    ],
    "patternId": "indent",
    "title": "Indent",
    "description": "Enforce consistent indentation",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "indent-legacy",
    "title": "Indent legacy",
    "description": "Enforce consistent indentation",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "unnamedParam"
      }
    ],
    "patternId": "init-declarations",
    "title": "Init declarations",
    "description": "Require or disallow initialization in variable declarations",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "unnamedParam"
      }
    ],
    "patternId": "jsx-quotes",
    "title": "Jsx quotes",
    "description": "Enforce the consistent use of either double or single quotes in JSX attributes",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "key-spacing",
    "title": "Key spacing",
    "description": "Enforce consistent spacing between keys and values in object literal properties",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "before",
        "description": "before"
      },
      {
        "name": "after",
        "description": "after"
      }
    ],
    "patternId": "keyword-spacing",
    "title": "Keyword spacing",
    "description": "Enforce consistent spacing before and after keywords",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "line-comment-position",
    "title": "Line comment position",
    "description": "Enforce position of line comments",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "linebreak-style",
    "title": "Linebreak style",
    "description": "Enforce consistent linebreak style",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "beforeBlockComment",
        "description": "beforeBlockComment"
      },
      {
        "name": "afterBlockComment",
        "description": "afterBlockComment"
      },
      {
        "name": "beforeLineComment",
        "description": "beforeLineComment"
      },
      {
        "name": "afterLineComment",
        "description": "afterLineComment"
      },
      {
        "name": "allowBlockStart",
        "description": "allowBlockStart"
      },
      {
        "name": "allowBlockEnd",
        "description": "allowBlockEnd"
      }
    ],
    "patternId": "lines-around-comment",
    "title": "Lines around comment",
    "description": "Require empty lines around comments",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "lines-around-directive",
    "title": "Lines around directive",
    "description": "Require or disallow newlines around directives",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "unnamedParam"
      },
      {
        "name": "exceptAfterSingleLine",
        "description": "exceptAfterSingleLine"
      }
    ],
    "patternId": "lines-between-class-members",
    "title": "Lines between class members",
    "description": "Require or disallow an empty line between class members",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "max-classes-per-file",
    "title": "Max classes per file",
    "description": "Enforce a maximum number of classes per file",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "max-depth",
    "title": "Max depth",
    "description": "Enforce a maximum depth that blocks can be nested",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "max-len",
    "title": "Max len",
    "description": "Enforce a maximum line length",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "max-lines",
    "title": "Max lines",
    "description": "Enforce a maximum number of lines per file",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "max-lines-per-function",
    "title": "Max lines per function",
    "description": "Enforce a maximum number of lines of code in a function",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "unnamedParam"
      }
    ],
    "patternId": "max-nested-callbacks",
    "title": "Max nested callbacks",
    "description": "Enforce a maximum depth that callbacks can be nested",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "max-params",
    "title": "Max params",
    "description": "Enforce a maximum number of parameters in function definitions",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "max-statements",
    "title": "Max statements",
    "description": "Enforce a maximum number of statements allowed in function blocks",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "max",
        "description": "max"
      }
    ],
    "patternId": "max-statements-per-line",
    "title": "Max statements per line",
    "description": "Enforce a maximum number of statements allowed per line",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "multiline-comment-style",
    "title": "Multiline comment style",
    "description": "Enforce a particular style for multiline comments",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "multiline-ternary",
    "title": "Multiline ternary",
    "description": "Enforce newlines between operands of ternary expressions",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "newIsCap",
        "description": "newIsCap"
      },
      {
        "name": "capIsNew",
        "description": "capIsNew"
      },
      {
        "name": "properties",
        "description": "properties"
      }
    ],
    "patternId": "new-cap",
    "title": "New cap",
    "description": "Require constructor names to begin with a capital letter",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "new-parens",
    "title": "New parens",
    "description": "Enforce or disallow parentheses when invoking a constructor with no arguments",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "unnamedParam"
      }
    ],
    "patternId": "newline-after-var",
    "title": "Newline after var",
    "description": "Require or disallow an empty line after variable declarations",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "newline-before-return",
    "title": "Newline before return",
    "description": "Require an empty line before `return` statements",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "ignoreChainWithDepth",
        "description": "ignoreChainWithDepth"
      }
    ],
    "patternId": "newline-per-chained-call",
    "title": "Newline per chained call",
    "description": "Require a newline after each call in a method chain",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-alert",
    "title": "No alert",
    "description": "Disallow the use of `alert`, `confirm`, and `prompt`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-array-constructor",
    "title": "No array constructor",
    "description": "Disallow `Array` constructors",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-async-promise-executor",
    "title": "No async promise executor",
    "description": "Disallow using an async function as a Promise executor",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-await-in-loop",
    "title": "No await in loop",
    "description": "Disallow `await` inside of loops",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "int32Hint",
        "description": "int32Hint"
      }
    ],
    "patternId": "no-bitwise",
    "title": "No bitwise",
    "description": "Disallow bitwise operators",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-buffer-constructor",
    "title": "No buffer constructor",
    "description": "Disallow use of the `Buffer()` constructor",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-caller",
    "title": "No caller",
    "description": "Disallow the use of `arguments.caller` or `arguments.callee`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-case-declarations",
    "title": "No case declarations",
    "description": "Disallow lexical declarations in case clauses",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-catch-shadow",
    "title": "No catch shadow",
    "description": "Disallow `catch` clause parameters from shadowing variables in the outer scope",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-class-assign",
    "title": "No class assign",
    "description": "Disallow reassigning class members",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-compare-neg-zero",
    "title": "No compare neg zero",
    "description": "Disallow comparing against -0",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "unnamedParam"
      }
    ],
    "patternId": "no-cond-assign",
    "title": "No cond assign",
    "description": "Disallow assignment operators in conditional expressions",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "allowParens",
        "description": "allowParens"
      },
      {
        "name": "onlyOneSimpleParam",
        "description": "onlyOneSimpleParam"
      }
    ],
    "patternId": "no-confusing-arrow",
    "title": "No confusing arrow",
    "description": "Disallow arrow functions where they could be confused with comparisons",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-console",
    "title": "No console",
    "description": "Disallow the use of `console`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-const-assign",
    "title": "No const assign",
    "description": "Disallow reassigning `const` variables",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "checkLoops",
        "description": "checkLoops"
      }
    ],
    "patternId": "no-constant-condition",
    "title": "No constant condition",
    "description": "Disallow constant expressions in conditions",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-constructor-return",
    "title": "No constructor return",
    "description": "Disallow returning value from constructor",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-continue",
    "title": "No continue",
    "description": "Disallow `continue` statements",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-control-regex",
    "title": "No control regex",
    "description": "Disallow control characters in regular expressions",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-debugger",
    "title": "No debugger",
    "description": "Disallow the use of `debugger`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-delete-var",
    "title": "No delete var",
    "description": "Disallow deleting variables",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-div-regex",
    "title": "No div regex",
    "description": "Disallow division operators explicitly at the beginning of regular expressions",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-dupe-args",
    "title": "No dupe args",
    "description": "Disallow duplicate arguments in `function` definitions",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-dupe-class-members",
    "title": "No dupe class members",
    "description": "Disallow duplicate class members",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-dupe-else-if",
    "title": "No dupe else if",
    "description": "Disallow duplicate conditions in if-else-if chains",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-dupe-keys",
    "title": "No dupe keys",
    "description": "Disallow duplicate keys in object literals",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-duplicate-case",
    "title": "No duplicate case",
    "description": "Disallow duplicate case labels",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "includeExports",
        "description": "includeExports"
      }
    ],
    "patternId": "no-duplicate-imports",
    "title": "No duplicate imports",
    "description": "Disallow duplicate module imports",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "allowElseIf",
        "description": "allowElseIf"
      }
    ],
    "patternId": "no-else-return",
    "title": "No else return",
    "description": "Disallow `else` blocks after `return` statements in `if` statements",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "allowEmptyCatch",
        "description": "allowEmptyCatch"
      }
    ],
    "patternId": "no-empty",
    "title": "No empty",
    "description": "Disallow empty block statements",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-empty-character-class",
    "title": "No empty character class",
    "description": "Disallow empty character classes in regular expressions",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-empty-function",
    "title": "No empty function",
    "description": "Disallow empty functions",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-empty-pattern",
    "title": "No empty pattern",
    "description": "Disallow empty destructuring patterns",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-eq-null",
    "title": "No eq null",
    "description": "Disallow `null` comparisons without type-checking operators",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "allowIndirect",
        "description": "allowIndirect"
      }
    ],
    "patternId": "no-eval",
    "title": "No eval",
    "description": "Disallow the use of `eval()`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-ex-assign",
    "title": "No ex assign",
    "description": "Disallow reassigning exceptions in `catch` clauses",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-extend-native",
    "title": "No extend native",
    "description": "Disallow extending native types",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-extra-bind",
    "title": "No extra bind",
    "description": "Disallow unnecessary calls to `.bind()`",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "enforceForLogicalOperands",
        "description": "enforceForLogicalOperands"
      }
    ],
    "patternId": "no-extra-boolean-cast",
    "title": "No extra boolean cast",
    "description": "Disallow unnecessary boolean casts",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-extra-label",
    "title": "No extra label",
    "description": "Disallow unnecessary labels",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-extra-parens",
    "title": "No extra parens",
    "description": "Disallow unnecessary parentheses",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-extra-semi",
    "title": "No extra semi",
    "description": "Disallow unnecessary semicolons",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "commentPattern",
        "description": "commentPattern"
      }
    ],
    "patternId": "no-fallthrough",
    "title": "No fallthrough",
    "description": "Disallow fallthrough of `case` statements",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-floating-decimal",
    "title": "No floating decimal",
    "description": "Disallow leading or trailing decimal points in numeric literals",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-func-assign",
    "title": "No func assign",
    "description": "Disallow reassigning `function` declarations",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-global-assign",
    "title": "No global assign",
    "description": "Disallow assignments to native objects or read-only global variables",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "boolean",
        "description": "boolean"
      },
      {
        "name": "number",
        "description": "number"
      },
      {
        "name": "string",
        "description": "string"
      },
      {
        "name": "disallowTemplateShorthand",
        "description": "disallowTemplateShorthand"
      }
    ],
    "patternId": "no-implicit-coercion",
    "title": "No implicit coercion",
    "description": "Disallow shorthand type conversions",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "lexicalBindings",
        "description": "lexicalBindings"
      }
    ],
    "patternId": "no-implicit-globals",
    "title": "No implicit globals",
    "description": "Disallow declarations in the global scope",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-implied-eval",
    "title": "No implied eval",
    "description": "Disallow the use of `eval()`-like methods",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-import-assign",
    "title": "No import assign",
    "description": "Disallow assigning to imported bindings",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-inline-comments",
    "title": "No inline comments",
    "description": "Disallow inline comments after code",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "unnamedParam"
      }
    ],
    "patternId": "no-inner-declarations",
    "title": "No inner declarations",
    "description": "Disallow variable or `function` declarations in nested blocks",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-invalid-regexp",
    "title": "No invalid regexp",
    "description": "Disallow invalid regular expression strings in `RegExp` constructors",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "capIsConstructor",
        "description": "capIsConstructor"
      }
    ],
    "patternId": "no-invalid-this",
    "title": "No invalid this",
    "description": "Disallow `this` keywords outside of classes or class-like objects",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "skipComments",
        "description": "skipComments"
      },
      {
        "name": "skipStrings",
        "description": "skipStrings"
      },
      {
        "name": "skipTemplates",
        "description": "skipTemplates"
      },
      {
        "name": "skipRegExps",
        "description": "skipRegExps"
      }
    ],
    "patternId": "no-irregular-whitespace",
    "title": "No irregular whitespace",
    "description": "Disallow irregular whitespace",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-iterator",
    "title": "No iterator",
    "description": "Disallow the use of the `__iterator__` property",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-label-var",
    "title": "No label var",
    "description": "Disallow labels that share a name with a variable",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "allowLoop",
        "description": "allowLoop"
      },
      {
        "name": "allowSwitch",
        "description": "allowSwitch"
      }
    ],
    "patternId": "no-labels",
    "title": "No labels",
    "description": "Disallow labeled statements",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-lone-blocks",
    "title": "No lone blocks",
    "description": "Disallow unnecessary nested blocks",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-lonely-if",
    "title": "No lonely if",
    "description": "Disallow `if` statements as the only statement in `else` blocks",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-loop-func",
    "title": "No loop func",
    "description": "Disallow function declarations that contain unsafe references inside loop statements",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-loss-of-precision",
    "title": "No loss of precision",
    "description": "Disallow literal numbers that lose precision",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "detectObjects",
        "description": "detectObjects"
      },
      {
        "name": "enforceConst",
        "description": "enforceConst"
      },
      {
        "name": "ignoreArrayIndexes",
        "description": "ignoreArrayIndexes"
      },
      {
        "name": "ignoreDefaultValues",
        "description": "ignoreDefaultValues"
      }
    ],
    "patternId": "no-magic-numbers",
    "title": "No magic numbers",
    "description": "Disallow magic numbers",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-misleading-character-class",
    "title": "No misleading character class",
    "description": "Disallow characters which are made with multiple code points in character class syntax",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "allowSamePrecedence",
        "description": "allowSamePrecedence"
      }
    ],
    "patternId": "no-mixed-operators",
    "title": "No mixed operators",
    "description": "Disallow mixed binary operators",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-mixed-requires",
    "title": "No mixed requires",
    "description": "Disallow `require` calls to be mixed with regular variable declarations",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-mixed-spaces-and-tabs",
    "title": "No mixed spaces and tabs",
    "description": "Disallow mixed spaces and tabs for indentation",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "ignoreNonDeclaration",
        "description": "ignoreNonDeclaration"
      }
    ],
    "patternId": "no-multi-assign",
    "title": "No multi assign",
    "description": "Disallow use of chained assignment expressions",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "ignoreEOLComments",
        "description": "ignoreEOLComments"
      }
    ],
    "patternId": "no-multi-spaces",
    "title": "No multi spaces",
    "description": "Disallow multiple spaces",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-multi-str",
    "title": "No multi str",
    "description": "Disallow multiline strings",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-multiple-empty-lines",
    "title": "No multiple empty lines",
    "description": "Disallow multiple empty lines",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-native-reassign",
    "title": "No native reassign",
    "description": "Disallow assignments to native objects or read-only global variables",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-negated-condition",
    "title": "No negated condition",
    "description": "Disallow negated conditions",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-negated-in-lhs",
    "title": "No negated in lhs",
    "description": "Disallow negating the left operand in `in` expressions",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-nested-ternary",
    "title": "No nested ternary",
    "description": "Disallow nested ternary expressions",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-new",
    "title": "No new",
    "description": "Disallow `new` operators outside of assignments or comparisons",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-new-func",
    "title": "No new func",
    "description": "Disallow `new` operators with the `Function` object",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-new-object",
    "title": "No new object",
    "description": "Disallow `Object` constructors",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-new-require",
    "title": "No new require",
    "description": "Disallow `new` operators with calls to `require`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-new-symbol",
    "title": "No new symbol",
    "description": "Disallow `new` operators with the `Symbol` object",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-new-wrappers",
    "title": "No new wrappers",
    "description": "Disallow `new` operators with the `String`, `Number`, and `Boolean` objects",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-nonoctal-decimal-escape",
    "title": "No nonoctal decimal escape",
    "description": "Disallow `\\8` and `\\9` escape sequences in string literals",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-obj-calls",
    "title": "No obj calls",
    "description": "Disallow calling global object properties as functions",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-octal",
    "title": "No octal",
    "description": "Disallow octal literals",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-octal-escape",
    "title": "No octal escape",
    "description": "Disallow octal escape sequences in string literals",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-param-reassign",
    "title": "No param reassign",
    "description": "Disallow reassigning `function` parameters",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-path-concat",
    "title": "No path concat",
    "description": "Disallow string concatenation with `__dirname` and `__filename`",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "allowForLoopAfterthoughts",
        "description": "allowForLoopAfterthoughts"
      }
    ],
    "patternId": "no-plusplus",
    "title": "No plusplus",
    "description": "Disallow the unary operators `++` and `--`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-process-env",
    "title": "No process env",
    "description": "Disallow the use of `process.env`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-process-exit",
    "title": "No process exit",
    "description": "Disallow the use of `process.exit()`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-promise-executor-return",
    "title": "No promise executor return",
    "description": "Disallow returning values from Promise executor functions",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-proto",
    "title": "No proto",
    "description": "Disallow the use of the `__proto__` property",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-prototype-builtins",
    "title": "No prototype builtins",
    "description": "Disallow calling some `Object.prototype` methods directly on objects",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "builtinGlobals",
        "description": "builtinGlobals"
      }
    ],
    "patternId": "no-redeclare",
    "title": "No redeclare",
    "description": "Disallow variable redeclaration",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-regex-spaces",
    "title": "No regex spaces",
    "description": "Disallow multiple spaces in regular expressions",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-restricted-exports",
    "title": "No restricted exports",
    "description": "Disallow specified names in exports",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-restricted-globals",
    "title": "No restricted globals",
    "description": "Disallow specified global variables",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-restricted-imports",
    "title": "No restricted imports",
    "description": "Disallow specified modules when loaded by `import`",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "unnamedParam"
      }
    ],
    "patternId": "no-restricted-modules",
    "title": "No restricted modules",
    "description": "Disallow specified modules when loaded by `require`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-restricted-properties",
    "title": "No restricted properties",
    "description": "Disallow certain properties on certain objects",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-restricted-syntax",
    "title": "No restricted syntax",
    "description": "Disallow specified syntax",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "unnamedParam"
      }
    ],
    "patternId": "no-return-assign",
    "title": "No return assign",
    "description": "Disallow assignment operators in `return` statements",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-return-await",
    "title": "No return await",
    "description": "Disallow unnecessary `return await`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-script-url",
    "title": "No script url",
    "description": "Disallow `javascript:` urls",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "props",
        "description": "props"
      }
    ],
    "patternId": "no-self-assign",
    "title": "No self assign",
    "description": "Disallow assignments where both sides are exactly the same",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-self-compare",
    "title": "No self compare",
    "description": "Disallow comparisons where both sides are exactly the same",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "allowInParentheses",
        "description": "allowInParentheses"
      }
    ],
    "patternId": "no-sequences",
    "title": "No sequences",
    "description": "Disallow comma operators",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-setter-return",
    "title": "No setter return",
    "description": "Disallow returning values from setters",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "builtinGlobals",
        "description": "builtinGlobals"
      },
      {
        "name": "hoist",
        "description": "hoist"
      },
      {
        "name": "ignoreOnInitialization",
        "description": "ignoreOnInitialization"
      }
    ],
    "patternId": "no-shadow",
    "title": "No shadow",
    "description": "Disallow variable declarations from shadowing variables declared in the outer scope",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-shadow-restricted-names",
    "title": "No shadow restricted names",
    "description": "Disallow identifiers from shadowing restricted names",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-spaced-func",
    "title": "No spaced func",
    "description": "Disallow spacing between function identifiers and their applications (deprecated)",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-sparse-arrays",
    "title": "No sparse arrays",
    "description": "Disallow sparse arrays",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "allowAtRootLevel",
        "description": "allowAtRootLevel"
      }
    ],
    "patternId": "no-sync",
    "title": "No sync",
    "description": "Disallow synchronous methods",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "allowIndentationTabs",
        "description": "allowIndentationTabs"
      }
    ],
    "patternId": "no-tabs",
    "title": "No tabs",
    "description": "Disallow all tabs",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-template-curly-in-string",
    "title": "No template curly in string",
    "description": "Disallow template literal placeholder syntax in regular strings",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-ternary",
    "title": "No ternary",
    "description": "Disallow ternary operators",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-this-before-super",
    "title": "No this before super",
    "description": "Disallow `this`/`super` before calling `super()` in constructors",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-throw-literal",
    "title": "No throw literal",
    "description": "Disallow throwing literals as exceptions",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "skipBlankLines",
        "description": "skipBlankLines"
      },
      {
        "name": "ignoreComments",
        "description": "ignoreComments"
      }
    ],
    "patternId": "no-trailing-spaces",
    "title": "No trailing spaces",
    "description": "Disallow trailing whitespace at the end of lines",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "typeof",
        "description": "typeof"
      }
    ],
    "patternId": "no-undef",
    "title": "No undef",
    "description": "Disallow the use of undeclared variables unless mentioned in `/*global */` comments",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-undef-init",
    "title": "No undef init",
    "description": "Disallow initializing variables to `undefined`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-undefined",
    "title": "No undefined",
    "description": "Disallow the use of `undefined` as an identifier",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "allowAfterThis",
        "description": "allowAfterThis"
      },
      {
        "name": "allowAfterSuper",
        "description": "allowAfterSuper"
      },
      {
        "name": "allowAfterThisConstructor",
        "description": "allowAfterThisConstructor"
      },
      {
        "name": "enforceInMethodNames",
        "description": "enforceInMethodNames"
      },
      {
        "name": "allowFunctionParams",
        "description": "allowFunctionParams"
      }
    ],
    "patternId": "no-underscore-dangle",
    "title": "No underscore dangle",
    "description": "Disallow dangling underscores in identifiers",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-unexpected-multiline",
    "title": "No unexpected multiline",
    "description": "Disallow confusing multiline expressions",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-unmodified-loop-condition",
    "title": "No unmodified loop condition",
    "description": "Disallow unmodified loop conditions",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "defaultAssignment",
        "description": "defaultAssignment"
      }
    ],
    "patternId": "no-unneeded-ternary",
    "title": "No unneeded ternary",
    "description": "Disallow ternary operators when simpler alternatives exist",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-unreachable",
    "title": "No unreachable",
    "description": "Disallow unreachable code after `return`, `throw`, `continue`, and `break` statements",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-unreachable-loop",
    "title": "No unreachable loop",
    "description": "Disallow loops with a body that allows only one iteration",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-unsafe-finally",
    "title": "No unsafe finally",
    "description": "Disallow control flow statements in `finally` blocks",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "enforceForOrderingRelations",
        "description": "enforceForOrderingRelations"
      }
    ],
    "patternId": "no-unsafe-negation",
    "title": "No unsafe negation",
    "description": "Disallow negating the left operand of relational operators",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "disallowArithmeticOperators",
        "description": "disallowArithmeticOperators"
      }
    ],
    "patternId": "no-unsafe-optional-chaining",
    "title": "No unsafe optional chaining",
    "description": "Disallow use of optional chaining in contexts where the `undefined` value is not allowed",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "allowShortCircuit",
        "description": "allowShortCircuit"
      },
      {
        "name": "allowTernary",
        "description": "allowTernary"
      },
      {
        "name": "allowTaggedTemplates",
        "description": "allowTaggedTemplates"
      },
      {
        "name": "enforceForJSX",
        "description": "enforceForJSX"
      }
    ],
    "patternId": "no-unused-expressions",
    "title": "No unused expressions",
    "description": "Disallow unused expressions",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-unused-labels",
    "title": "No unused labels",
    "description": "Disallow unused labels",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-unused-private-class-members",
    "title": "No unused private class members",
    "description": "Disallow unused private class members",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-unused-vars",
    "title": "No unused vars",
    "description": "Disallow unused variables",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-use-before-define",
    "title": "No use before define",
    "description": "Disallow the use of variables before they are defined",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-useless-backreference",
    "title": "No useless backreference",
    "description": "Disallow useless backreferences in regular expressions",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-useless-call",
    "title": "No useless call",
    "description": "Disallow unnecessary calls to `.call()` and `.apply()`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-useless-catch",
    "title": "No useless catch",
    "description": "Disallow unnecessary `catch` clauses",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "enforceForClassMembers",
        "description": "enforceForClassMembers"
      }
    ],
    "patternId": "no-useless-computed-key",
    "title": "No useless computed key",
    "description": "Disallow unnecessary computed property keys in objects and classes",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-useless-concat",
    "title": "No useless concat",
    "description": "Disallow unnecessary concatenation of literals or template literals",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-useless-constructor",
    "title": "No useless constructor",
    "description": "Disallow unnecessary constructors",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-useless-escape",
    "title": "No useless escape",
    "description": "Disallow unnecessary escape characters",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "ignoreDestructuring",
        "description": "ignoreDestructuring"
      },
      {
        "name": "ignoreImport",
        "description": "ignoreImport"
      },
      {
        "name": "ignoreExport",
        "description": "ignoreExport"
      }
    ],
    "patternId": "no-useless-rename",
    "title": "No useless rename",
    "description": "Disallow renaming import, export, and destructured assignments to the same name",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-useless-return",
    "title": "No useless return",
    "description": "Disallow redundant return statements",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-var",
    "title": "No var",
    "description": "Require `let` or `const` instead of `var`",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "allowAsStatement",
        "description": "allowAsStatement"
      }
    ],
    "patternId": "no-void",
    "title": "No void",
    "description": "Disallow `void` operators",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-warning-comments",
    "title": "No warning comments",
    "description": "Disallow specified warning terms in comments",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-whitespace-before-property",
    "title": "No whitespace before property",
    "description": "Disallow whitespace before properties",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-with",
    "title": "No with",
    "description": "Disallow `with` statements",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "nonblock-statement-body-position",
    "title": "Nonblock statement body position",
    "description": "Enforce the location of single-line statements",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "object-curly-newline",
    "title": "Object curly newline",
    "description": "Enforce consistent line breaks after opening and before closing braces",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "unnamedParam"
      }
    ],
    "patternId": "object-curly-spacing",
    "title": "Object curly spacing",
    "description": "Enforce consistent spacing inside braces",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "allowAllPropertiesOnSameLine",
        "description": "allowAllPropertiesOnSameLine"
      },
      {
        "name": "allowMultiplePropertiesPerLine",
        "description": "allowMultiplePropertiesPerLine"
      }
    ],
    "patternId": "object-property-newline",
    "title": "Object property newline",
    "description": "Enforce placing object properties on separate lines",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "object-shorthand",
    "title": "Object shorthand",
    "description": "Require or disallow method and property shorthand syntax for object literals",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "unnamedParam"
      }
    ],
    "patternId": "one-var",
    "title": "One var",
    "description": "Enforce variables to be declared either together or separately in functions",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "one-var-declaration-per-line",
    "title": "One var declaration per line",
    "description": "Require or disallow newlines around variable declarations",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "operator-assignment",
    "title": "Operator assignment",
    "description": "Require or disallow assignment operator shorthand where possible",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "unnamedParam"
      }
    ],
    "patternId": "operator-linebreak",
    "title": "Operator linebreak",
    "description": "Enforce consistent linebreak style for operators",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "unnamedParam"
      },
      {
        "name": "allowSingleLineBlocks",
        "description": "allowSingleLineBlocks"
      }
    ],
    "patternId": "padded-blocks",
    "title": "Padded blocks",
    "description": "Require or disallow padding within blocks",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "padding-line-between-statements",
    "title": "Padding line between statements",
    "description": "Require or disallow padding lines between statements",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "allowNamedFunctions",
        "description": "allowNamedFunctions"
      },
      {
        "name": "allowUnboundThis",
        "description": "allowUnboundThis"
      }
    ],
    "patternId": "prefer-arrow-callback",
    "title": "Prefer arrow callback",
    "description": "Require using arrow functions for callbacks",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "destructuring",
        "description": "destructuring"
      },
      {
        "name": "ignoreReadBeforeAssign",
        "description": "ignoreReadBeforeAssign"
      }
    ],
    "patternId": "prefer-const",
    "title": "Prefer const",
    "description": "Require `const` declarations for variables that are never reassigned after declared",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "prefer-destructuring",
    "title": "Prefer destructuring",
    "description": "Require destructuring from arrays and/or objects",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "prefer-exponentiation-operator",
    "title": "Prefer exponentiation operator",
    "description": "Disallow the use of `Math.pow` in favor of the `**` operator",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "prefer-named-capture-group",
    "title": "Prefer named capture group",
    "description": "Enforce using named capture group in regular expression",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "prefer-numeric-literals",
    "title": "Prefer numeric literals",
    "description": "Disallow `parseInt()` and `Number.parseInt()` in favor of binary, octal, and hexadecimal literals",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "prefer-object-has-own",
    "title": "Prefer object has own",
    "description": "Disallow use of `Object.prototype.hasOwnProperty.call()` and prefer use of `Object.hasOwn()`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "prefer-object-spread",
    "title": "Prefer object spread",
    "description": "Disallow using Object.assign with an object literal as the first argument and prefer the use of object spread instead.",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "allowEmptyReject",
        "description": "allowEmptyReject"
      }
    ],
    "patternId": "prefer-promise-reject-errors",
    "title": "Prefer promise reject errors",
    "description": "Require using Error objects as Promise rejection reasons",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "prefer-reflect",
    "title": "Prefer reflect",
    "description": "Require `Reflect` methods where applicable",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "disallowRedundantWrapping",
        "description": "disallowRedundantWrapping"
      }
    ],
    "patternId": "prefer-regex-literals",
    "title": "Prefer regex literals",
    "description": "Disallow use of the `RegExp` constructor in favor of regular expression literals",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "prefer-rest-params",
    "title": "Prefer rest params",
    "description": "Require rest parameters instead of `arguments`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "prefer-spread",
    "title": "Prefer spread",
    "description": "Require spread operators instead of `.apply()`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "prefer-template",
    "title": "Prefer template",
    "description": "Require template literals instead of string concatenation",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "quote-props",
    "title": "Quote props",
    "description": "Require quotes around object literal property names",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "unnamedParam"
      },
      {
        "name": "avoidEscape",
        "description": "avoidEscape"
      },
      {
        "name": "allowTemplateLiterals",
        "description": "allowTemplateLiterals"
      }
    ],
    "patternId": "quotes",
    "title": "Quotes",
    "description": "Enforce the consistent use of either backticks, double, or single quotes",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "radix",
    "title": "Radix",
    "description": "Enforce the consistent use of the radix argument when using `parseInt()`",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "allowProperties",
        "description": "allowProperties"
      }
    ],
    "patternId": "require-atomic-updates",
    "title": "Require atomic updates",
    "description": "Disallow assignments that can lead to race conditions due to usage of `await` or `yield`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "require-await",
    "title": "Require await",
    "description": "Disallow async functions which have no `await` expression",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "require",
        "description": "require"
      }
    ],
    "patternId": "require-jsdoc",
    "title": "Require jsdoc",
    "description": "Require JSDoc comments",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "require-unicode-regexp",
    "title": "Require unicode regexp",
    "description": "Enforce the use of `u` flag on RegExp",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "require-yield",
    "title": "Require yield",
    "description": "Require generator functions to contain `yield`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "rest-spread-spacing",
    "title": "Rest spread spacing",
    "description": "Enforce spacing between rest and spread operators and their expressions",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "unnamedParam"
      }
    ],
    "patternId": "semi",
    "title": "Semi",
    "description": "Require or disallow semicolons instead of ASI",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "before",
        "description": "before"
      },
      {
        "name": "after",
        "description": "after"
      }
    ],
    "patternId": "semi-spacing",
    "title": "Semi spacing",
    "description": "Enforce consistent spacing before and after semicolons",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "semi-style",
    "title": "Semi style",
    "description": "Enforce location of semicolons",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "ignoreCase",
        "description": "ignoreCase"
      },
      {
        "name": "ignoreDeclarationSort",
        "description": "ignoreDeclarationSort"
      },
      {
        "name": "ignoreMemberSort",
        "description": "ignoreMemberSort"
      },
      {
        "name": "allowSeparatedGroups",
        "description": "allowSeparatedGroups"
      }
    ],
    "patternId": "sort-imports",
    "title": "Sort imports",
    "description": "Enforce sorted import declarations within modules",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "unnamedParam"
      },
      {
        "name": "caseSensitive",
        "description": "caseSensitive"
      },
      {
        "name": "natural",
        "description": "natural"
      },
      {
        "name": "minKeys",
        "description": "minKeys"
      }
    ],
    "patternId": "sort-keys",
    "title": "Sort keys",
    "description": "Require object keys to be sorted",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "ignoreCase",
        "description": "ignoreCase"
      }
    ],
    "patternId": "sort-vars",
    "title": "Sort vars",
    "description": "Require variables within the same declaration block to be sorted",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "unnamedParam"
      }
    ],
    "patternId": "space-before-blocks",
    "title": "Space before blocks",
    "description": "Enforce consistent spacing before blocks",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "unnamedParam"
      }
    ],
    "patternId": "space-before-function-paren",
    "title": "Space before function paren",
    "description": "Enforce consistent spacing before `function` definition opening parenthesis",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "unnamedParam"
      }
    ],
    "patternId": "space-in-parens",
    "title": "Space in parens",
    "description": "Enforce consistent spacing inside parentheses",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "int32Hint",
        "description": "int32Hint"
      }
    ],
    "patternId": "space-infix-ops",
    "title": "Space infix ops",
    "description": "Require spacing around infix operators",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "words",
        "description": "words"
      },
      {
        "name": "nonwords",
        "description": "nonwords"
      }
    ],
    "patternId": "space-unary-ops",
    "title": "Space unary ops",
    "description": "Enforce consistent spacing before or after unary operators",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "unnamedParam"
      }
    ],
    "patternId": "spaced-comment",
    "title": "Spaced comment",
    "description": "Enforce consistent spacing after the `//` or `/*` in a comment",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "unnamedParam"
      }
    ],
    "patternId": "strict",
    "title": "Strict",
    "description": "Require or disallow strict mode directives",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "before",
        "description": "before"
      },
      {
        "name": "after",
        "description": "after"
      }
    ],
    "patternId": "switch-colon-spacing",
    "title": "Switch colon spacing",
    "description": "Enforce spacing around colons of switch statements",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "symbol-description",
    "title": "Symbol description",
    "description": "Require symbol descriptions",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "template-curly-spacing",
    "title": "Template curly spacing",
    "description": "Require or disallow spacing around embedded expressions of template strings",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "template-tag-spacing",
    "title": "Template tag spacing",
    "description": "Require or disallow spacing between template tags and their literals",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "unicode-bom",
    "title": "Unicode bom",
    "description": "Require or disallow Unicode byte order mark (BOM)",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "enforceForSwitchCase",
        "description": "enforceForSwitchCase"
      },
      {
        "name": "enforceForIndexOf",
        "description": "enforceForIndexOf"
      }
    ],
    "patternId": "use-isnan",
    "title": "Use isnan",
    "description": "Require calls to `isNaN()` when checking for `NaN`",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "requireReturn",
        "description": "requireReturn"
      },
      {
        "name": "requireParamDescription",
        "description": "requireParamDescription"
      },
      {
        "name": "requireReturnDescription",
        "description": "requireReturnDescription"
      },
      {
        "name": "requireReturnType",
        "description": "requireReturnType"
      },
      {
        "name": "requireParamType",
        "description": "requireParamType"
      }
    ],
    "patternId": "valid-jsdoc",
    "title": "Valid jsdoc",
    "description": "Enforce valid JSDoc comments",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "requireStringLiterals",
        "description": "requireStringLiterals"
      }
    ],
    "patternId": "valid-typeof",
    "title": "Valid typeof",
    "description": "Enforce comparing `typeof` expressions against valid strings",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vars-on-top",
    "title": "Vars on top",
    "description": "Require `var` declarations be placed at the top of their containing scope",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "unnamedParam"
      },
      {
        "name": "functionPrototypeMethods",
        "description": "functionPrototypeMethods"
      }
    ],
    "patternId": "wrap-iife",
    "title": "Wrap iife",
    "description": "Require parentheses around immediate `function` invocations",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "wrap-regex",
    "title": "Wrap regex",
    "description": "Require parenthesis around regex literals",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "yield-star-spacing",
    "title": "Yield star spacing",
    "description": "Require or disallow spacing around the `*` in `yield*` expressions",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "unnamedParam"
      },
      {
        "name": "exceptRange",
        "description": "exceptRange"
      },
      {
        "name": "onlyEquality",
        "description": "onlyEquality"
      }
    ],
    "patternId": "yoda",
    "title": "Yoda",
    "description": "Require or disallow \"Yoda\" conditions",
    "timeToFix": 5
  }
]
